from glob import glob
import json

import snakemake
# from lasagna.snakes.firesnake3 import call_firesnake
from firesnake3 import call_firesnake, load_well_tile_list


# if true, will run when the data is complete, doing what it can
# snakemake.ignore_missing = True


WELLS = ['{0}{1:02d}'.format(r,c) for r in 'ABCDEFGH' for c in range(1, 13)]
PLATES = '10X_mNeon-SIR-plateA-IL1b', '10X_mNeon-SIR-plateB-TNFa'

rule all:
    input:
    # can request individual files here
        expand('process/10X_{plate}_{well}.nuclei.tif', plate=PLATES, well=WELLS),

rule segment_nuclei_stack:
    input:
        '10X_{plate}_{well}/10X_{plate}_{well}.live.tif'
    output:
        'process/10X_{plate}_{well}.nuclei.tif'
    run:
        call_firesnake('segment_nuclei_stack', output, data=input[0], 
            dapi_index=1, threshold=1200, area_min=0.25*150, area_max=0.25*800)




# rule segment_cells:
#     """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
#     not the best if something else is available.
#     """
#     input:
#         expand('process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif', cycle=CYCLES[0]),
#         'process/10X_{well}_Tile-{tile}.nuclei.tif'
#     output:
#         'process/10X_{well}_Tile-{tile}.cells.tif'
#     run:
#         call_firesnake('segment_cells', output, 
#             data=input[0], nuclei=input[1], threshold=4*200)

# rule align:
#     priority: -1
#     input:
#         expand('process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif', cycle=CYCLES)
#     output:
#         'process/10X_{well}_Tile-{tile}.log.tif'
#     run:
#         call_firesnake('align_log_SBS_stack', output, data=input,
#             display_ranges=DISPLAY_RANGES)

# rule extract_phenotype:
#     input:
#         'process/10X_{well}_Tile-{tile}.phenotype_aligned.tif',
#         'process/10X_{well}_Tile-{tile}.nuclei_phenotype.tif',
#         'process/10X_{well}_Tile-{tile}.cells_phenotype.tif'
#     output:
#         'process/10X_{well}_Tile-{tile}.phenotype.pkl'
#     run:
#         call_firesnake('extract_phenotype_translocation', output, 
#             data_phenotype=input[0], nuclei=input[1], cells=input[2], wildcards=dict(wildcards))
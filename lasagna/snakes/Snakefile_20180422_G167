from glob import glob
import json

import snakemake
import sys
sys.path.append('E:/packages/lasagna/')
from lasagna.snakes.firesnake3 import call_firesnake, load_well_tile_list
# from firesnake3 import call_firesnake


# if true, will run when the data is complete, doing what it can
# snakemake.ignore_missing = True

# UPDATE: set to number of cycles used
CYCLES = ['c{cycle}-SBS-{cycle}'.format(cycle=c) for c in range(1, 13)]
CYCLES = CYCLES[:9]
CYCLE_PHENOTYPE = 'c0-myc-405-HA-488'

THRESHOLD_DO = 2000
THRESHOLD_DAPI = 1200
INDEX_DO = None

# special pairs of WELLS and TILES
import pandas as pd
WELLS_, TILES_ = load_well_tile_list('well_tile_list_process.pkl')
WELLS = ['A1', 'A2', 'A3', 'B1', 'B2', 'B3']
RANGE = lambda x: list(map(str, range(x[0] * x[1])))
TILES = RANGE((25, 25))


DISPLAY_RANGES=((500, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000))


CHANNEL_OFFSETS = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]


rule all:
    input:
        # expand('process/10X_{well}_Tile-{tile}.barcodes.csv', zip, well=WELLS, tile=TILES),
        # expand('process/10X_{well}_Tile-{tile}.phenotype.pkl', zip, well=WELLS, tile=TILES)
        expand('process/10X_{well}_Tile-{tile}.cy3_quality.csv', well=WELLS, tile=TILES)


rule segment_nuclei:
    input:
        'process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif'.format(cycle=CYCLES[0]),
        # discarded input, to change run order
        'process/10X_{well}_Tile-{tile}.aligned.tif'
    output:
        'process/10X_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake('segment_nuclei', output, data=input[0], 
            threshold=THRESHOLD_DAPI, area_min=0.25*150, area_max=0.25*800)

rule segment_cells:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        expand('process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif', cycle=CYCLES[0]),
        'process/10X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/10X_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake('segment_cells', output, 
            data=input[0], nuclei=input[1], threshold=4*200)

rule align:
    priority: -1
    input:
        expand('process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif', cycle=CYCLES)
    output:
        'process/10X_{well}_Tile-{tile}.aligned.tif'
    run:
        call_firesnake('align_DAPI_first', output, data=input,
            display_ranges=DISPLAY_RANGES, channel_offsets=CHANNEL_OFFSETS)

rule transform_LoG:
    input:
        'process/10X_{well}_Tile-{tile}.aligned.tif'
    output:
        'process/10X_{well}_Tile-{tile}.log.tif'
    run:
        call_firesnake('transform_LoG', output, data=input[0],
            display_ranges=DISPLAY_RANGES)

rule consensus_DO:
    input:
        'process/10X_{well}_Tile-{tile}.log.tif'
    output:
        temp('process/10X_{well}_Tile-{tile}.consensus_DO.tif')
    run:
        call_firesnake('consensus_DO', output, data=input[0])

rule find_peaks:
    input:
        'process/10X_{well}_Tile-{tile}.consensus_DO.tif'
    output:
        'process/10X_{well}_Tile-{tile}.peaks.tif'
    run:
        call_firesnake('find_peaks', output, data=input[0], display_ranges=None, compress=1) 

rule max_filter:
    input:
        'process/10X_{well}_Tile-{tile}.log.tif'
    output:
        temp('process/10X_{well}_Tile-{tile}.maxed.tif')
    run:
        call_firesnake('max_filter', output, 
            data=input[0], width=3, display_ranges=DISPLAY_RANGES) 

rule extract_barcodes:
    input:
        'process/10X_{well}_Tile-{tile}.peaks.tif',
        'process/10X_{well}_Tile-{tile}.maxed.tif',
        'process/10X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/10X_{well}_Tile-{tile}.barcodes.csv'
    run:
        call_firesnake('extract_barcodes', output, 
            peaks=input[0], data_max=input[1], cells=input[2], 
            cycles=CYCLES, threshold_DO=THRESHOLD_DO, index_DO=INDEX_DO,
            wildcards=dict(wildcards)) 

rule extract_phenotype:
    input:
        'process/10X_{well}_Tile-{tile}.phenotype_aligned.tif',
        'process/10X_{well}_Tile-{tile}.nuclei.tif',
        'process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif'.format(cycle=CYCLES[0])

    output:
        'process/10X_{well}_Tile-{tile}.phenotype.pkl'
    run:
        call_firesnake('extract_phenotype_FR_2_color', output, 
            data_phenotype=input[0], nuclei=input[1], data_sbs_1=input[2], wildcards=dict(wildcards))

rule align_phenotype:
    input:
        'process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif'.format(cycle=CYCLES[0]),
        'process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif'.format(cycle=CYCLE_PHENOTYPE)

    output:
        'process/10X_{well}_Tile-{tile}.phenotype_aligned.tif'
    run:
        call_firesnake('align_phenotype', output, 
            data_DO=input[0], data_phenotype=input[1], wildcards=dict(wildcards))


rule check_cy3_quality: 
    input:
        'process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif'.format(cycle=CYCLES[0])
    output:
        'process/10X_{well}_Tile-{tile}.cy3_quality.csv'
    run:
        call_firesnake('check_cy3_quality', output, data=input[0], wildcards=dict(wildcards))

from glob import glob
import json

import snakemake
import sys
sys.path.append('E:/packages/lasagna/')
from lasagna.snakes.firesnake3 import call_firesnake
# from firesnake3 import call_firesnake


# if true, will run when the data is complete, doing what it can
# snakemake.ignore_missing = True

# UPDATE: more sites will take longer for the DAG to build (especially if ignore_missing is true)
WELLS =  [r + str(c) for r in 'AB' for c in range(1,13)]
# WELLS = [r + str(c) for r in 'G' for c in (3, 4, 5, 6, 9, 10, 11, 12)]
# WELLS = ['G3', 'G6']

RANGE = lambda x: list(map(str, range(x[0] * x[1])))
TILES = RANGE((8, 8))

MAG_AREA = 1
RING_WIDTH = 3
MEDIAN_WIDTH = 7
THRESHOLD_DAPI = 2500

CYCLE = 'DAPI-rabbit-488'
DATA_TIF = 'process/20X_DAPI-rabbit-488/20X_DAPI-rabbit-488_{well}_Tile-{tile}.max.tif'
MEDIAN_TIF = 'process/20X_DAPI-rabbit-488_{{well}}_Tile-{{tile}}.median-GFP-{width}.tif'.format(width=MEDIAN_WIDTH)


rule all:
    input:
        expand('process/20X_{well}_Tile-{tile}.phenotype.pkl', well=WELLS, tile=TILES),
        expand('process/20X_{well}_Tile-{tile}.phenotype_ring_3x3.pkl', well=WELLS, tile=TILES),
        expand('process/20X_{well}_Tile-{tile}.phenotype_median.pkl', well=WELLS, tile=TILES)

rule segment_nuclei:
    priority: -1
    input:
        DATA_TIF
    output:
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake('segment_nuclei', output, data=input[0], 
            threshold=THRESHOLD_DAPI, area_min=MAG_AREA*150, area_max=MAG_AREA*800)

rule segment_cells:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        DATA_TIF,
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake('segment_cells', output, 
            data=input[0], nuclei=input[1], threshold=4*200)

rule median_filter:
    input:
        DATA_TIF,
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        temp(MEDIAN_TIF)
    run:
        call_firesnake('median_filter', output, 
            data=input[0], index=1, width=MEDIAN_WIDTH)

rule extract_phenotype:
    input:
        DATA_TIF,
        'process/20X_{well}_Tile-{tile}.nuclei.tif',
        'process/20X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/20X_{well}_Tile-{tile}.phenotype.pkl'
    run:
        call_firesnake('extract_phenotype_translocation', output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], wildcards=dict(wildcards))

rule extract_phenotype_median:
    input:
        MEDIAN_TIF,
        'process/20X_{well}_Tile-{tile}.nuclei.tif',
        'process/20X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/20X_{well}_Tile-{tile}.phenotype_median.pkl'
    run:
        call_firesnake('extract_phenotype_translocation', output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], wildcards=dict(wildcards))

rule extract_phenotype_ring:
    input:
        DATA_TIF,
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{{well}}_Tile-{{tile}}.phenotype_ring_{width}x{width}.pkl'.format(width=RING_WIDTH)
    run:
        call_firesnake('extract_phenotype_translocation_ring', output, 
            data_phenotype=input[0], nuclei=input[1], width=RING_WIDTH, wildcards=dict(wildcards))
 

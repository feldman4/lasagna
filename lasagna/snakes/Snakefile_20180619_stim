from glob import glob
import json

import snakemake
# from lasagna.snakes.firesnake3 import call_firesnake
from firesnake3 import call_firesnake, load_well_tile_list


# if true, will run when the data is complete, doing what it can
# snakemake.ignore_missing = True


WELLS = [r + str(c) for r in 'ABCDEFGH' for c in range(1,13)]
PLATES = 'DAPI-mNeon-TNFa', 
RANGE = lambda x: list(map(str, range(x[0] * x[1])))
TILES = RANGE((4, 4))

rule all:
    input:
    # can request individual files here
        # expand('process/10X_{plate}_{well}_Tile-{tile}.nuclei.tif', plate=PLATES, well=WELLS, tile=TILES),
        expand('process/10X_{plate}_{well}_Tile-{tile}.phenotype.pkl', plate=PLATES, well=WELLS, tile=TILES)

rule segment_nuclei:
    input:
        'process/10X_{plate}/10X_{plate}_{well}_Tile-{tile}.max.tif'
    output:
        'process/10X_{plate}_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake('segment_nuclei', output, data=input[0], 
            threshold=1200, area_min=0.25*150, area_max=0.25*800)

rule segment_cells:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        'process/10X_{plate}/10X_{plate}_{well}_Tile-{tile}.max.tif',
        'process/10X_{plate}_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/10X_{plate}_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake('segment_cells', output, 
            data=input[0], nuclei=input[1], threshold=1200)

# rule align:
#     priority: -1
#     input:
#         expand('process/10X_{cycle}/10X_{cycle}_{{well}}_Tile-{{tile}}.max.tif', cycle=CYCLES)
#     output:
#         'process/10X_{well}_Tile-{tile}.log.tif'
#     run:
#         call_firesnake('align_log_SBS_stack', output, data=input,
#             display_ranges=DISPLAY_RANGES)

rule extract_phenotype:
    input:
        'process/10X_{plate}/10X_{plate}_{well}_Tile-{tile}.max.tif',
        'process/10X_{plate}_{well}_Tile-{tile}.nuclei.tif',
        'process/10X_{plate}_{well}_Tile-{tile}.cells.tif'
    output:
        'process/10X_{plate}_{well}_Tile-{tile}.phenotype.pkl'
    run:
        call_firesnake('extract_phenotype_translocation', output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], wildcards=dict(wildcards))
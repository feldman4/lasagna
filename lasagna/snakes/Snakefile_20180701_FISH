from glob import glob
import json

import snakemake
# from lasagna.snakes.firesnake3 import call_firesnake
from firesnake3 import call_firesnake, load_well_tile_list, load_well_site_list


# if true, will run when the data is complete, doing what it can
# snakemake.ignore_missing = True

THRESHOLD_DO = 1000

# UPDATE: more Tiles will take longer for the DAG to build (especially if ignore_missing is true)
WELLS_, TILES_ = load_well_tile_list('well_tile_list_process.pkl')
WELLS_, TILES_ = load_well_tile_list('well_tile_list_process_select.pkl')
WELLS_ = WELLS_
# TILES_ = TILES_

DISPLAY_RANGES=((500, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000))


rule all:
    input:
    # can request individual files here
        # expand('process/20X_{well}_Tile-{tile}.phenotype.csv', zip, well=WELLS_, tile=TILES_),
        # expand('process/20X_{well}_Tile-{tile}.cells.tif', zip, well=WELLS_, tile=TILES_),
        expand('process/20X_{well}_Tile-{tile}.phenotype.csv', zip, well=WELLS_, tile=TILES_),


rule segment_nuclei:
    input:
        'process/input/20X_FISH_{well}_Tile-{tile}.dapi.tif'
    output:
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake('segment_nuclei', output, data=input[0], 
            threshold=5000, area_min=150, area_max=800)

rule segment_cells:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        'process/20X_FISH/20X_FISH_{well}_Tile-{tile}.max.tif',
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake('segment_cells', output, 
            data=input[0], nuclei=input[1], threshold=1500)

# rule find_peaks:
#     input:
#         'process/20X_{well}_Tile-{tile}.consensus_DO.tif'
#     output:
#         'process/20X_{well}_Tile-{tile}.peaks.tif'
#     run:
#         call_firesnake('find_peaks', output, data=input[0], display_ranges=None) 

rule extract_FISH_phenotype:
    input:
        'process/20X_FISH/20X_FISH_{well}_Tile-{tile}.max.tif',
        'process/20X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/20X_{well}_Tile-{tile}.phenotype.csv'
    run:
        call_firesnake('extract_FISH_phenotype', output, 
            data=input[0], cells=input[1], wildcards=dict(wildcards))